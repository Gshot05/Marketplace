openapi: 3.0.0
info:
  title: Marketplace API
  description: API для маркетплейса услуг (Go + PostgreSQL)
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки
tags:
  - name: auth
    description: Аутентификация и регистрация
  - name: offers
    description: Управление предложениями (для заказчиков)
  - name: services
    description: Управление услугами (для исполнителей)
  - name: favorites
    description: Управление избранным (для заказчиков)

paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Неверные входные данные
        '409':
          description: Email уже занят
        '500':
          description: Ошибка сервера

  /auth/login:
    post:
      tags: [auth]
      summary: Аутентификация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
        '500':
          description: Ошибка сервера

  /api/offers:
    post:
      tags: [offers]
      summary: Создать новое предложение (только для заказчиков)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfferRequest'
      responses:
        '200':
          description: Созданное предложение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '403':
          description: Только для заказчиков
        '500':
          description: Ошибка сервера

    get:
      tags: [offers]
      summary: Получить список всех предложений
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        '404':
          description: Офферов пока нет
        '500':
          description: Ошибка сервера

    patch:
      tags: [offers]
      summary: Обновить предложение (только владелец)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOfferRequest'
      responses:
        '200':
          description: Обновленное предложение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Неверные данные
        '403':
          description: Нет прав на обновление
        '404':
          description: Предложение не найдено
        '500':
          description: Ошибка сервера

    delete:
      tags: [offers]
      summary: Удалить предложение (только владелец)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOfferRequest'
      responses:
        '200':
          description: Успешно удалено
          content:
            text/plain:
              schema:
                type: string
                example: "Успешно!"
        '403':
          description: Нет прав на удаление
        '404':
          description: Предложение не найдено
        '500':
          description: Ошибка сервера

  /api/services:
    post:
      tags: [services]
      summary: Создать новую услугу (только для исполнителей)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '200':
          description: Созданная услуга
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          description: Только для исполнителей
        '500':
          description: Ошибка сервера

    get:
      tags: [services]
      summary: Получить список всех услуг
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список услуг
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '404':
          description: Услуг пока нет
        '500':
          description: Ошибка сервера

    patch:
      tags: [services]
      summary: Обновить услугу (только владелец)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: Обновленная услуга
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Неверные данные
        '403':
          description: Нет прав на обновление
        '404':
          description: Услуга не найдена
        '500':
          description: Ошибка сервера

    delete:
      tags: [services]
      summary: Удалить услугу (только владелец)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteServiceRequest'
      responses:
        '200':
          description: Успешно удалено
          content:
            text/plain:
              schema:
                type: string
                example: "Успешно!"
        '403':
          description: Нет прав на удаление
        '404':
          description: Услуга не найдена
        '500':
          description: Ошибка сервера

  /api/favorites:
    post:
      tags: [favorites]
      summary: Добавить услугу в избранное (только для заказчиков)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFavoriteRequest'
      responses:
        '200':
          description: Добавлено в избранное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '403':
          description: Только для заказчиков
        '404':
          description: Услуга не найдена
        '500':
          description: Ошибка сервера

    get:
      tags: [favorites]
      summary: Получить список избранного (только для заказчиков)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список избранного
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteInfo'
        '404':
          description: Избранное пока пусто
        '500':
          description: Ошибка сервера

    delete:
      tags: [favorites]
      summary: Удалить из избранного (только владелец)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFavoriteRequest'
      responses:
        '200':
          description: Успешно удалено
          content:
            text/plain:
              schema:
                type: string
                example: "Успешно!"
        '403':
          description: Нет прав на удаление
        '404':
          description: Избранное не найдено
        '500':
          description: Ошибка сервера

components:
  schemas:
    RegisterRequest:
      type: object
      required: [email, password, role, name]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: securePassword123
        role:
          type: string
          enum: [customer, performer]
          example: customer
        name:
          type: string
          example: Иван Иванов

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: securePassword123

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT токен

    CreateOfferRequest:
      type: object
      required: [title, description, price]
      properties:
        title:
          type: string
          example: Нужен дизайн логотипа
        description:
          type: string
          example: Требуется разработать логотип для стартапа
        price:
          type: number
          format: float
          minimum: 0
          example: 5000.50

    UpdateOfferRequest:
      type: object
      required: [offerID]
      properties:
        offerID:
          type: integer
          example: 1
        title:
          type: string
          nullable: true
          example: Обновленный заголовок
        description:
          type: string
          nullable: true
          example: Новое описание
        price:
          type: number
          format: float
          nullable: true
          minimum: 0
          example: 5500.00

    DeleteOfferRequest:
      type: object
      required: [offerID]
      properties:
        offerID:
          type: integer
          example: 1

    CreateServiceRequest:
      type: object
      required: [title, description, price]
      properties:
        title:
          type: string
          example: Дизайн логотипа
        description:
          type: string
          example: Профессиональный дизайн логотипа для вашего бренда
        price:
          type: number
          format: float
          minimum: 0
          example: 5000.50

    UpdateServiceRequest:
      type: object
      required: [serviceID]
      properties:
        serviceID:
          type: integer
          example: 1
        title:
          type: string
          nullable: true
          example: Профессиональный дизайн
        description:
          type: string
          nullable: true
          example: Обновленные условия
        price:
          type: number
          format: float
          nullable: true
          minimum: 0
          example: 6000.00

    DeleteServiceRequest:
      type: object
      required: [serviceID]
      properties:
        serviceID:
          type: integer
          example: 1

    AddFavoriteRequest:
      type: object
      required: [serviceID]
      properties:
        serviceID:
          type: integer
          example: 1

    RemoveFavoriteRequest:
      type: object
      required: [serviceID]
      properties:
        serviceID:
          type: integer
          example: 1

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
          enum: [customer, performer]
        name:
          type: string
        created_at:
          type: string
          format: date-time

    Offer:
      type: object
      properties:
        id:
          type: integer
        customer_id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float

    Service:
      type: object
      properties:
        id:
          type: integer
        performer_id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float


    Favorite:
      type: object
      properties:
        id:
          type: integer
        customer_id:
          type: integer
        service_id:
          type: integer
 

    FavoriteInfo:
      type: object
      properties:
        id:
          type: integer
        customer_name:
          type: string
        service_title:
          type: string
        service_description:
          type: string
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT